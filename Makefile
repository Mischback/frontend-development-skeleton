# The intermediate build dir is the directory, where stylesheets, scripts,
# images and other static assets are collected (in their production-ready
# state) to be used by the final build step.
#
# This directory should be excluded from version control.
INTERMEDIATE_BUILD_DIR = build

# subdirectory for stylesheets
INTERMEDIATE_BUILD_CSS_DIR = $(INTERMEDIATE_BUILD_DIR)/css

# The source dir contains the source for stylesheets, scripts, images and any
# other static asset.
SOURCE_DIR = _src

# subdirectory for stylesheets (primarily sass/scss files, but may include
# other files aswell).
SOURCE_SASS_DIR = $(SOURCE_DIR)/sass


# vpath %.css $(INTERMEDIATE_BUILD_CSS_DIR)
vpath %.scss $(SOURCE_SASS_DIR)


# INTERNALS

# This flag is used to differentiate the build-modes "production" and
# "development".
# All recipes will create production ready assets, if called on its own. If the
# $(DEVELOPMENT_FLAG) is passed as $(BUILD_MODE) environment variable, the
# development-specific recipes will be executed, basically skipping
# optimization steps.
DEVELOPMENT_FLAG = dev

# utility function to create required directories on the fly
create_dir = @mkdir -p $(@D)


# Build all required assets, including stylesheets (css/*.css), javascripts
# (js/*.js), images/graphics (images/*.{png,jpg,webp} and fonts (fonts/*.*).
$(INTERMEDIATE_BUILD_DIR): $(INTERMEDIATE_BUILD_CSS_DIR)

# Build all required CSS files and store them in $(INTERMEDIATE_BUILD_CSS_DIR)
#
# The intended use-case is to have only one stylesheet, called "style.css".
# However, you may split your stylesheet in different files, you will only have
# to add more prerequisites to this rule.
#
# Please note: The prerequisites of this rule are in control of the actual file
# names and it is required to have a corresponding source file with a scss-
# extension in $(SOURCE_SASS_DIR).
# EXAMPLE: $(INTERMEDIATE_BUILD_CSS_DIR)/style.css is generated by compiling
#          $(SOURCE_SASS_DIR)/style.scss.
$(INTERMEDIATE_BUILD_CSS_DIR): $(INTERMEDIATE_BUILD_CSS_DIR)/style.css

# Actually compiles SCSS to CSS
# The recipe is using SASS (dart-sass) to compile *.scss files, which may be
# located in $(SOURCE_SASS_DIR), to *.css file(s), which will be written to
# $(INTERMEDIATE_BUILD_DIR.
# In production mode, these CSS files will then be post-processed by PostCSS.
#
# The recipe does respect the $(BUILD_MODE) and will create and store the
# corresponding source maps, if run with $(DEVELOPMENT_FLAG). In development
# mode no post-processing will be be performed.
$(INTERMEDIATE_BUILD_CSS_DIR)/%.css: %.scss $(SOURCE_SASS_DIR)/*.scss
	$(create_dir)
ifeq ($(BUILD_MODE),$(DEVELOPMENT_FLAG))
	echo "[DEVELOPMENT] building stylesheet: $@ from $<"
	# 1) compile SCSS to CSS, creating a source map
	npx sass $<:$@ --style=expanded --source-map --stop-on-error
else
	echo "[PRODUCTION] building stylesheet: $@ from $<"
	# 1) compile SCSS to CSS, without creating a source map
	#    (the style is still "expanded" because optimization is performed by
  #    PostCSS)
	# 2) actually run PostCSS (see ./postcss.config.js for details on the actual
  #    plugins in use)
	npx sass $< --style=expanded --no-source-map --stop-on-error | \
	npx postcss -o $@
endif

# Build the website in production mode.
# "Production mode" means:
#   - stylesheets are generated WITHOUT source maps
#   - stylesheets are purged, prefixed with vendor-specific stuff, minimized
prod:
	GNUMAKEFLAGS=--no-print-directory \
	$(MAKE) $(INTERMEDIATE_BUILD_DIR)

# Build the website in development mode.
# "Development mode" means:
#   - stylesheets are generated with a source map
#   - stylesheets will not be optimized / minimized
dev:
	BUILD_MODE=$(DEVELOPMENT_FLAG) \
	GNUMAKEFLAGS=--no-print-directory \
	$(MAKE) $(INTERMEDIATE_BUILD_DIR)

# Use NodeJS to watch for file changes and triggers rebuilding
# "npm-watch" is actually a wrapper around "nodemon" and simplifies
# configuration.
# "npm-watch" is configured in "./package.json" and basically triggers
# "make dev", rebuilding whatever is required.
dev/watch:
	npm run watch build

# do not print commands to stdout
.SILENT:

# these targets don't produce actual output
.PHONY: prod dev dev/watch
